name: Check PR Mentions

on:
  push:
    branches:
      - main
  workflow_dispatch:  
  # schedule:
  #   - cron: '0 * * * *'  

jobs:
  check-mentions:
    runs-on: self-hosted  

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure GitHub CLI and jq are installed
        run: |
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            sudo apt-get update && sudo apt-get install -y gh
          fi
          
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            sudo apt-get install -y jq
          fi          

      - name: Set up Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh mutt python3 cmake pkg-config 
          sudo apt install -y libz-dev iputils-ping


      - name: Get PR Details from Notifications
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          
          TARGET_REPO="saitama951/runtime"
          echo "Checking PR mentions in repository: $TARGET_REPO"
          PR_URL=$(gh api notifications -H "Authorization: token $GH_TOKEN" \
            --jq '.[] | select(.repository.full_name=="'"$TARGET_REPO"'") | select(.reason=="mention") | select(.subject.type=="PullRequest") | .subject.url' | head -n1)
          if [ -z "$PR_URL" ]; then
              echo "No relevant PR mention found."
              exit 1
          fi
          PR_NUMBER=$(echo "$PR_URL" | grep -oE '[0-9]+$')
          echo "$PR_NUMBER"   
          LATEST_COMMIT=$(gh pr view "$PR_NUMBER" --repo "$TARGET_REPO" --json commits -q '.commits[-1].oid')
          if [ -z "$LATEST_COMMIT" ]; then
              echo "Failed to fetch the latest commit from PR #$PR_NUMBER"
              exit 1
          fi

          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "LATEST_COMMIT=$LATEST_COMMIT" >> $GITHUB_ENV
          
          

      - name: Clone Repository
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          
          echo "Cloning repository..."
          gh repo clone saitama951/runtime
          cd runtime
          git config --global user.email "raoshreya412@gmail.com"
          git config --global user.name "ShreyaLaxminarayan"

          echo "Fetching latest changes..."
          git fetch origin main
          git checkout main
          
          echo "Latest commit ID: $LATEST_COMMIT"
          
          echo "Cherry-picking latest commit..."
          git cherry-pick $LATEST_COMMIT
          cd ..


      - name: Create directories
        run: |
          mkdir -p sdk packages
          version=$(jq -r .sdk.version $GITHUB_WORKSPACE/runtime/global.json)
          echo "v$version"
          mkdir -p $GITHUB_WORKSPACE/runtime/.dotnet/

      - name: Download SDK from GitHub Releases if extraction fails
        run: |
            set -x
            version=$(jq -r .sdk.version $GITHUB_WORKSPACE/runtime/global.json)
            echo "v$version"

            pushd sdk
            export GH_TOKEN=${{ secrets.PAT_TOKEN }}

            gh release list --repo IBM/dotnet-s390x

            gh release download v$version --repo IBM/dotnet-s390x --pattern dotnet-sdk-${version}-linux-s390x.tar.gz
            if [ $? -ne 0 ]; then
              echo "Failed to get the dotnet host SDK version ${version}. Please build the SDK" >> $GITHUB_WORKSPACE/error.log
              exit 1
            fi
            popd
            pushd packages
            gh release download v$version --repo IBM/dotnet-s390x --pattern '*linux-s390x*.nupkg'

            tar -xzf $GITHUB_WORKSPACE/sdk/dotnet-sdk-${version}-linux-s390x.tar.gz --directory $GITHUB_WORKSPACE/runtime/.dotnet/
            popd


      - name: Install Build dependencies
        run: |
          set -x
          pushd $GITHUB_WORKSPACE/runtime/eng/common/native
          sudo ./install-dependencies.sh
          popd
      
      - name: Build .NET Runtime
        run: |
          set -x

          pushd $GITHUB_WORKSPACE/runtime

          runtime_build_flags=(
            --cmakeargs -DCLR_CMAKE_USE_SYSTEM_ZLIB=true
            --portablebuild false
            --runtimeconfiguration Release
            --librariesConfiguration Debug
            --warnAsError false
            "/p:NoPgoOptimize=true"
            "/p:UsingToolMicrosoftNetCompilers=true"
            "/p:TreatWarningsAsErrors=false"
            "/p:DotNetBuildFromSource=true"
            "/p:DotNetBuildSourceOnly=true"
            "/p:DotNetBuildTests=true"
            "/p:PrimaryRuntimeFlavor=Mono"
            "/p:TargetRid=linux-s390x"
            --subset clr+mono+libs+host+packs+libs.tests
            --test
          )

          ./build.sh "${runtime_build_flags[@]}" >> $GITHUB_WORKSPACE/log
          

          # Check if build was successful
          # if [ $? -ne 0 ]; then
          #   echo "build failed! please check the errors" >> $GITHUB_WORKSPACE/error.log
          # else
          #   echo "build success!" >> $GITHUB_WORKSPACE/build_success.log
          # fi
          
          popd        

      - name: Attach File & Reply in PR
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "$PR_NUMBER"
          TARGET_REPO="saitama951/runtime"
          
          echo "Uploading file..."
          FILE_PATH="$GITHUB_WORKSPACE/log" 
          echo "Generated report for PR #$PR_NUMBER" > $FILE_PATH
      
          UPLOAD_URL=$(gh release create temp-upload --repo "$TARGET_REPO" --title "Temporary Upload" --notes "File attached for PR #$PR_NUMBER" --draft)
          gh release upload temp-upload "$FILE_PATH" --repo "$TARGET_REPO"
      
          FILE_URL="https://github.com/$TARGET_REPO/releases/download/temp-upload/$FILE_PATH"
      
          echo "Posting comment on PR..."
          gh pr comment "$PR_NUMBER" --repo "$TARGET_REPO" --body "Here is the attached file: [Download file]($FILE_URL)"
      


    
          
          



          
