name: Setup Dotnet SDK and Merge PR

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:

  setup-dotnet-sdk:
    runs-on: self-hosted 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh python3 cmake pkg-config libz-dev iputils-ping

      - name: Clone .NET Runtime Repository
        run: |
          mkdir runtime
          git clone https://github.com/dotnet/runtime.git runtime

      - name: Set up GitHub CLI authentication
        run: |
          echo ${{ secrets.PAT_TOKEN }} | gh auth login --with-token
          
      - name: Fetch PR Number from GitHub Mentions
        id: fetch_pr
        run: |
          TARGET_REPO="dotnet/runtime"
          GITHUB_USER="${{ github.actor }}"  # Automatically gets your username

          echo "Checking PR mentions for user: $GITHUB_USER"

          # Fetch notifications where you were mentioned in the target repository
          PR_URL=$(gh api notifications --jq '.[] | select(.repository.full_name=="'"$TARGET_REPO"'") | select(.reason=="mention") | .subject.url' | grep '/pull/' | head -n1)

          if [ -z "$PR_URL" ]; then
            echo "No relevant PR mention found."
            exit 1
          fi

          # Extract PR number from URL
          PR_NUMBER=$(echo "$PR_URL" | grep -oE '[0-9]+$')
          echo "Identified PR #: $PR_NUMBER"
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

      - name: Validate PR is Open
        run: |
          PR_STATE=$(gh pr view $PR_NUMBER --repo dotnet/runtime --json state -q '.state')

          if [ "$PR_STATE" != "OPEN" ]; then
            echo "PR #$PR_NUMBER is not open. Exiting..."
            exit 1
          fi

          echo "PR #$PR_NUMBER is open and ready for merge."

      - name: Fetch Latest Commit of PR and Merge into Main
        run: |
          cd runtime

          # Fetch PR details
          PR_BRANCH=$(gh pr view $PR_NUMBER --repo dotnet/runtime --json headRefName -q '.headRefName')
          PR_REPO=$(gh pr view $PR_NUMBER --repo dotnet/runtime --json headRepository -q '.headRepository.name')
          PR_OWNER=$(gh pr view $PR_NUMBER --repo dotnet/runtime --json headRepositoryOwner -q '.headRepositoryOwner.login')

          echo "Merging PR: #$PR_NUMBER from $PR_OWNER/$PR_REPO:$PR_BRANCH"

          # Add remote and fetch the PR branch
          git remote add pr_repo https://github.com/$PR_OWNER/$PR_REPO.git
          git fetch pr_repo $PR_BRANCH

          # Merge PR into main
          git checkout main
          git merge --no-edit pr_repo/$PR_BRANCH || { echo "Merge conflict detected!"; exit 1; }

      - name: Build .NET Runtime
        run: |
          set -x
          cd runtime
          
          runtime_build_flags=(
            --cmakeargs -DCLR_CMAKE_USE_SYSTEM_ZLIB=true
            --portablebuild false
            --runtimeconfiguration Release
            --librariesConfiguration Debug
            --warnAsError false
            "/p:NoPgoOptimize=true"
            "/p:UsingToolMicrosoftNetCompilers=true"
            "/p:TreatWarningsAsErrors=false"
            "/p:DotNetBuildFromSource=true"
            "/p:DotNetBuildSourceOnly=true"
            "/p:DotNetBuildTests=true"
            "/p:PrimaryRuntimeFlavor=Mono"
            "/p:TargetRid=linux-s390x"
            --subset clr+mono+libs+host+packs+libs.tests
            --test
          )

          ./build.sh "${runtime_build_flags[@]}"

          # Check if build was successful
          if [ $? -ne 0 ]; then
            echo "Build failed! Check the errors." >> $GITHUB_WORKSPACE/error.log
            exit 1
          else
            echo "Build success!" >> $GITHUB_WORKSPACE/build_success.log
          fi
