name: Build and Test PR

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: "Pull Request Number"
        required: true
      commit_id:
        description: "Commit ID"
        required: true
      mentioning_user:
        description: "User who mentioned the bot"
        required: true

jobs:
  build-test:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment variables
        run: |
          echo "PR_NUMBER=${{ github.event.inputs.pr_number }}" >> $GITHUB_ENV
          echo "LATEST_COMMIT=${{ github.event.inputs.commit_id }}" >> $GITHUB_ENV
          echo "MENTIONING_USER=${{ github.event.inputs.mentioning_user }}" >> $GITHUB_ENV

      - name: Set up Podman and Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh mutt python3 cmake pkg-config 
          sudo apt install -y libz-dev iputils-ping

      - name: Clone Repository and Checkout Commit
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "Cloning repository..."
          if [ -d "runtime" ]; then
              rm -rf runtime
          fi
          gh repo clone saitama951/runtime
          cd runtime
          git config --global user.email "raoshreya412@gmail.com"
          git config --global user.name "ShreyaLaxminarayan"
          git fetch origin pull/$PR_NUMBER/head:pr-test
          git checkout main
          git merge pr-test
          cd ..

      - name: Create directories and Set Up SDK
        run: |
          mkdir -p sdk packages
          version=$(jq -r .sdk.version $GITHUB_WORKSPACE/runtime/global.json)
          echo "v$version"
          mkdir -p $GITHUB_WORKSPACE/runtime/.dotnet/

      - name: Download SDK from GitHub Releases if extraction fails
        run: |
          set -x
          version=$(jq -r .sdk.version $GITHUB_WORKSPACE/runtime/global.json)
          echo "v$version"

          pushd sdk
          export GH_TOKEN=${{ secrets.PAT_TOKEN }}

          gh release download v$version --repo IBM/dotnet-s390x --pattern dotnet-sdk-${version}-linux-s390x.tar.gz
          if [ $? -ne 0 ]; then
            echo "Failed to get the dotnet host SDK version ${version}. Please build the SDK" >> $GITHUB_WORKSPACE/error.log
            exit 1
          fi
          popd
          pushd packages
          gh release download v$version --repo IBM/dotnet-s390x --pattern '*linux-s390x*.nupkg'

          tar -xzf $GITHUB_WORKSPACE/sdk/dotnet-sdk-${version}-linux-s390x.tar.gz --directory $GITHUB_WORKSPACE/runtime/.dotnet/
          popd

      - name: Install Build Dependencies
        run: |
          set -x
          pushd $GITHUB_WORKSPACE/runtime/eng/common/native
          sudo ./install-dependencies.sh
          popd

      - name: Build .NET Runtime
        continue-on-error: true
        run: |
          set -x
          pushd $GITHUB_WORKSPACE/runtime

          runtime_build_flags=(
            --cmakeargs -DCLR_CMAKE_USE_SYSTEM_ZLIB=true
            --portablebuild false
            --runtimeconfiguration Release
            --librariesConfiguration Debug
            --warnAsError false
            "/p:NoPgoOptimize=true"
            "/p:UsingToolMicrosoftNetCompilers=true"
            "/p:TreatWarningsAsErrors=false"
            "/p:DotNetBuildFromSource=true"
            "/p:DotNetBuildSourceOnly=true"
            "/p:DotNetBuildTests=true"
            "/p:PrimaryRuntimeFlavor=Mono"
            "/p:TargetRid=linux-s390x"
            --subset clr+mono+libs+host+packs+libs.tests
            --test
          )


          ./build.sh "${runtime_build_flags[@]}" >> $GITHUB_WORKSPACE/log 2>&1 & BUILD_PID=$!
          while kill -0 $BUILD_PID 2>/dev/null; do
            inotifywait -e modify -t 1500 "$GITHUB_WORKSPACE/log" || { 
              echo "Logs inactive for 25 min. Restarting..." 
              kill $BUILD_PID 
              ./build.sh "${runtime_build_flags[@]}" >> $GITHUB_WORKSPACE/log 2>&1 & BUILD_PID=$!
            }
          done
          wait $BUILD_PID
          if [ $? -ne 0 ]; then
            echo "Build failed! Please check the errors" >> $GITHUB_WORKSPACE/log1
          else
            echo "Build success!" >> $GITHUB_WORKSPACE/log1
          fi
          popd        

      - name: Reply in PR with Logs
        env:
            GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
            TARGET_REPO="saitama951/runtime"            
            GIST_DESC="Logs for PR #$PR_NUMBER - Commit $LATEST_COMMIT"
            GIST_URL=$(gh gist create "$GITHUB_WORKSPACE/log" --public --desc "$GIST_DESC")
            echo "Gist created at: $GIST_URL"
            gh pr comment "$PR_NUMBER" --repo "$TARGET_REPO" --body "@$MENTIONING_USER $(cat $GITHUB_WORKSPACE/log1). \n  Please check the logs: ðŸ”— [View Full Logs]($GIST_URL)"

      - name: Mark Notification as Read
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          NOTIF_ID=$(gh api notifications --jq ".[] | select(.subject.url | contains(\"pulls/${PR_NUMBER}\")) | .id")
          if [ -n "$NOTIF_ID" ]; then
            gh api --method PATCH /notifications/threads/$NOTIF_ID
            echo "Marked notification for PR $PR_NUMBER as read."
          else
            echo "No notification found for PR $PR_NUMBER."
          fi



#stupid code
# echo "Build finished with status $?" >> $GITHUB_WORKSPACE/log1.txt
# popd

